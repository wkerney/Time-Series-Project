#Forecast Demand
#----------------------------------------------------------
# Tasks:
#    Import data, create time series objects.
#    Analyze trend, seasonality.
#    Auto ARIMA modelling & parameters
#    Create and evaluate ARIMA demand model
#    Forecast demand, plot, extact and evaluate.

# ---------------------------------------------------------
# Task 1 - Import data, create time series objects
# ---------------------------------------------------------

# Code To Check & Install Libraries
check = c("forecast","data.table","ggplot2") %in% installed.packages()
if(!check[1]) install.packages("forecast")
if(!check[2]) install.packages("data.table")
if(!check[3]) install.packages("ggplot2")
library(forecast); library(data.table); library(ggplot2)
rm(check)


# Import Demand Data
dt = fread("Demand Data.csv")

# Format Date, add additional columns
dt$Date = as.Date(dt$Date, "yyyy-mm-dd")
dt[, WeekDay := wday(Date) ]
dt[, WeekNum := week(Date) ]
dt[, Month   := month(Date)]
dt[, Year    := year(Date) ]

# Plotted demand data for a chosen product
ggplot(data = dt, aes(x = Date, y = Paint)) +
  geom_line(color = "blue")+
  xlab("Year") +
  ylab("Daily Demand for Paint")

# Summarized demand by week and by month
cnames = names(dt)[2:7]

dtw = dt[, lapply(.SD, sum, na.rm=TRUE), 
         by = .(WeekNum,Year), .SDcols=cnames ]

dtm = dt[, lapply(.SD, sum, na.rm=TRUE), 
         by = .(Month,Year), .SDcols=cnames ]

# Filtering Data Tables
dtw[Year == 2020]
dtm[Year >= 2019]

# Extracting Columns as Vectors
dtm[, Paint]
dtm[Year >= 2020, Paint]

#-----Created Time Series Objects From Demand Data ----

ts_dtm = ts(dtm[,Paint], frequency =12, start = c(2018,1))

autoplot(ts_dtm) + 
  xlab("Year") +
  ylab("Monthly Demand for Paint")

ts_dtw = ts(dtw[,GardEquip], frequency = 52, start = c(2018,1))

autoplot(ts_dtw) + 
  xlab("Year") +
  ylab("Weekly Demand for Garden Equipment")

# Checked to see if It's Time Series Object
is.ts(dt)  
is.ts(ts_dtw)


# ---------------------------------------------------------
# Task 2 - Analyze demand trend & seasonality 
# ---------------------------------------------------------

ts_dtw = ts(dtw[,Compost], frequency =52, start = c(2018,1))
autoplot(ts_dtw)

ts_dtm = ts(dtm[,DoorLock], frequency =12, start = c(2018,1))
autoplot(ts_dtm)

# ------ACF and PACF --------------------------------------
#   
#   ACF  = Auto-correlation Function 
#   PACF = Partial Auto-correlation Function 

Acf(ts_dtm)
Pacf(ts_dtm)


# ------Decompose Data ------------------------------------

ts_dtm  %>%
  decompose() %>%
  autoplot()

ts_dtw  %>%
  decompose() %>%
  autoplot()


# ------Extract Decomposed Data ---------------------------

decompose(ts_dtm)$trend
decompose(ts_dtm)$seasonal
decompose(ts_dtm)$random

autoplot(ts_dtm - decompose(ts_dtm)$seasonal)
autoplot(ts_dtm - decompose(ts_dtm)$trend)

Pacf(ts_dtm - decompose(ts_dtm)$seasonal)


# ---------------------------------------------------------
# Task 3 - Auto ARIMA modelling & parameters
# ---------------------------------------------------------

# ------ARIMA -----------------------------------

auto.arima(ts_dtm)

# ARIMA (p,d,q) (P,D,Q) [freq]
# (p,d,q) - non-seasonal part
# (P,D,Q) - seasonal part

# p,P - order (number of time lags) of the autoregressive model
# d,P - degree of first differencing 
# q,P - order of the moving-average model

# AIC = Akaike Information Criterion
# BIC = Bayesian Information Criterion

# AIC and BIC estimate prediction error
#     and quantity the information loss
#     the lesser the better model we have

# List the models using 'trace = TRUE'
auto.arima(ts_dtm, ic = "bic", trace = TRUE)

# "stepwise = FALSE" searches more models. It's slow.
auto.arima(ts_dtm, stepwise = FALSE, trace = TRUE)

# The model can be stored in a variable
m = auto.arima(ts_dtm, ic = "bic", trace = TRUE)
print(m)

# ---------------------------------------------------------
# Task 4 - Created and evaluated ARIMA demand model
# ---------------------------------------------------------

ts_dtm = ts(dtm[,Paint], frequency =12, start = c(2018,1))
autoplot(ts_dtm)

m = auto.arima(ts_dtm, ic = "bic", trace = TRUE)
print(m)

auto.arima(ts_dtm, stepwise = FALSE, trace = TRUE)

m = Arima(ts_dtm, order = c(1,0,0),
          seasonal=list(order=c(0,1,0), period=12),
          include.drift = TRUE)
print(m)

Pacf(ts_dtm)

summary(m)

checkresiduals(m) # residuals normal, ACF matches periodicity



# ---------------------------------------------------------
# Task 5 - Forecast demand, plot, extact and evaluate (monthly)
# ---------------------------------------------------------

f = forecast(m, h = 12)  
autoplot(f)

autoplot(f, include = 24) # previous data points to include (2 years)

#----- Forecast Diagnosis  --------------------------------

plot(f$residuals)

qqnorm(f$residuals)
qqline(f$residuals, col = 2)

Acf(f$residuals)
Pacf(f$residuals)

#----- Write Output  -------------------------------------

out = as.data.table(f)
out = round(out,0)       # round the values to integers
write.csv(out,"Forecast.csv")

# ---------------------------------------------------------
# 52 Week Forecast for Garden Equipment
# ---------------------------------------------------------
ts_dtw = ts(dtw,[,GardEquip], frequency = 52, start = c(2018,1))
autoplot(ts_dtw)

ts_dtw %>% 
  decompose() %>% 
  autoplot()

auto.arima(ts_dtw, stepwise = FALSE, trace = TRUE)

m = Arima(ts_dtw, order = c(4,0,0),
          seasonal = list(order = c(1,1,0), period = 52),
          include.drift = TRUE)
print(m)

checkresiduals(m)

f= forecast(m, h = 52)

qqnorm(f$residuals)
qqline(f$residuals, col = 2)

Acf(f$residuals)
Pacf(f$residuals)

autoplot(f, include = 104)

install.packages("rmarkdown")
